name: 3 tests

on:
  schedule:
    - cron: "15 3 * * *"
  workflow_dispatch:

env:
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  CHAT_ID: ${{ secrets.CHAT_ID }}
  HEADLESS: ${{ secrets.HEADLESS }}
  TOKEN: ${{ secrets.TOKEN }}
  QASE_REPORT: 1
  QASE_PROJECT_CODE: INT
  QASE_RUN_COMPLETE: true
  QASE_TESTOPS_API_TOKEN: ${{ secrets.QASE_TESTOPS_API_TOKEN }}
  QASE_TESTOPS_RUN_TITLE: Утренние тесты

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    name: Run autotests
    steps:
      - name: Download repository
        uses: actions/checkout@v2

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests and generate Allure results
        run: |
          pytest tests/test_new_tags tests/test_forms/prod tests/test_review/prod tests/test_search --alluredir=allure-results
        continue-on-error: true

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Install Allure command-line tool
        run: |
          sudo apt install -y allure  # Install Allure command-line tool

      - name: Generate Allure report
        run: allure generate allure-results --clean -o allure-report
        continue-on-error: true

      - name: Save report as artifact
        uses: actions/upload-artifact@v2
        with:
          name: allure-report
          path: allure-report
          retention-days: 7

  publish-report:
    name: Report publication
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: allure-report
          path: ./

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

  download-history:
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download artifacts
        run: |
          ARTIFACT_ID=$(curl -sL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.TOKEN }}" "https://api.github.com/repos/101internettests/qase_autotests/actions/artifacts?name=_site" | jq -r '.artifacts[0].id')
          curl -sL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.TOKEN }}" "https://api.github.com/repos/101internettests/qase_autotests/actions/artifacts/$ARTIFACT_ID/zip" -o artifacts.zip
          REPORT_ID=$(curl -sL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.TOKEN }}" "https://api.github.com/repos/101internettests/qase_autotests/actions/artifacts?name=github-pages" | jq -r '.artifacts[0].id')
          curl -sL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.TOKEN }}" "https://api.github.com/repos/101internettests/qase_autotests/actions/artifacts/$REPORT_ID/zip" -o pages.zip

      - name: Unzip artifacts
        run: |
          mkdir -p allure-results
          unzip -q artifacts.zip -d allure-results
          mkdir -p old_pages pages_history
          unzip -q pages.zip -d old_pages
          tar -xf old_pages/artifact.tar -C pages_history

      - name: Copy history to Allure results
        run: |
          cp -r pages_history/history/* allure-results
          cp -r pages_history/history/ allure-results

      - name: Store Allure history
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results
          retention-days: 2